# Configuration for MySQL Database
#We don't have to add driver class name because boot will see the dependency and autoconfigure the driver for us.
#Here employees is the Database name
spring.datasource.url=jdbc:mysql://localhost:3306/schooldb
spring.datasource.username=root
spring.datasource.password=password

#Hibernate properties
#dialect is used to tell hibernate that which DB we are using so that hibernate can create SQL for that particular
#type of DB, in our case we are using MySQl hence we added MySQL dialect, dialect will vary from DB type to type.
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
# for ddl-auto we have the following options
#none ? This option disables the hbm2ddl.auto tool, so Hibernate is not going to take any action for managing the underlying database schema.
#create-only ? This option instructs Hibernate to generate the database schema from the entity model.
#drop ? This option instructs Hibernate to drop the database schema using the entity model as a reference for the DDL DROP statements.
#create ? This option instructs Hibernate to drop the database schema and recreate it afterward using the entity model as a reference.
#create-drop ? This option instructs Hibernate to drop the database schema and recreate it afterward using the entity model as a reference. And, upon closing the JPA EntityManagerFactory or the Hibernate SessionFactory, the database schema will be dropped again.
#validate ? This option instructs Hibernate to validate the underlying database schema against the entity mappings.
#update ? This option instructs Hibernate to update the database schema by comparing the existing schema with the entity mappings and generate the appropriate schema migration scripts.
#Always use none in production
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
#Specifies number of database connections between database and application. This property controls the maximum size that the pool is allowed to reach, including both idle and in-use connections.
spring.datasource.hikari.maximum-pool-size=50
#Controls the maximum number of milliseconds that you will wait for setting up a connection from the pool
spring.datasource.hikari.connection-timeout=60000
#Controls the maximum amount of time that a connection is allowed to sit idle in the pool
spring.datasource.hikari.idle-timeout=600000
#Controls the maximum lifetime of a connection in the pool. An in-use connection will never be retired, only when it is closed it will be removed.
spring.datasource.hikari.max-lifetime=180000

#This things are written just to override the default username and password provided by spring when we include
#the security dependency
#spring.security.user.name=rakesh
#spring.security.user.password=rakesh123

#spring.profiles.active=classBcd, here we are activating the profile classBcd,
# any @Component class where we have @Profile("classBcd") will be activated and
# those changes will be taken into account

#This property is used to pick up the data/schema-h2.sql files
#spring.sql.init.mode=always, if false then data/schema-h2.sql files will never get picked up
#Location of our data/schema-h2.sql files if we are not using the default name
#spring.sql.init.data-locations=classpath:xyz.sql
#spring.sql.init.schema-locations=classpath:abc.sql



