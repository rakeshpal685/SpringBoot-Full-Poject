# Configuration for MySQL Database
#We don't have to add driver class name because boot will see the dependency and autoconfigure the driver for us.
#Here employees is the Database name
spring.datasource.url=jdbc:mysql://localhost:3306/schooldb
spring.datasource.username=root
spring.datasource.password=password

#Configuring multiple DB
#We have to configure two different configurations, repositories and entities
#H2
#spring.db1.datasource.jdbcUr1=url of the first DB
#spring.db1.datasource.username=sa
#spring.db1.datasource.password=sa
#spring.db1.datasource.driver-class-name=org.h2.Driver
#MySQL
#spring.db2.datasource.jdbcUr1=url of the second DB
#spring.db2.datasource.username=admin
#spring.db2.datasource.password=Bi76bzch
#spring.db2.datasource.jdbcUr1driver-class-name=com.mysql.jdbc.Driver


#Hibernate properties
#dialect is used to tell hibernate that which DB we are using so that hibernate can create SQL for that particular
#type of DB, in our case we are using MySQl hence we added MySQL dialect, dialect will vary from DB type to type.
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
# for ddl-auto we have the following options
#none ? This option disables the hbm2ddl.auto tool, so Hibernate is not going to take any action for managing the underlying database schema.
#create-only ? This option instructs Hibernate to generate the database schema from the entity model.
#drop ? This option instructs Hibernate to drop the database schema using the entity model as a reference for the DDL DROP statements.
#create ? This option instructs Hibernate to drop the database schema and recreate it afterward using the entity model as a reference.
#create-drop ? This option instructs Hibernate to drop the database schema and recreate it afterward using the entity model as a reference. And, upon closing the JPA EntityManagerFactory or the Hibernate SessionFactory, the database schema will be dropped again.
#validate ? This option instructs Hibernate to validate the underlying database schema against the entity mappings.
#update ? This option instructs Hibernate to update the database schema by comparing the existing schema with the entity mappings and generate the appropriate schema migration scripts.
#Always use none in production
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
#Specifies number of database connections between database and application. This property controls the maximum size that the pool is allowed to reach, including both idle and in-use connections.
spring.datasource.hikari.maximum-pool-size=50
#Controls the maximum number of milliseconds that you will wait for setting up a connection from the pool
spring.datasource.hikari.connection-timeout=60000
#Controls the maximum amount of time that a connection is allowed to sit idle in the pool
spring.datasource.hikari.idle-timeout=600000
#Controls the maximum lifetime of a connection in the pool. An in-use connection will never be retired, only when it is closed it will be removed.
spring.datasource.hikari.max-lifetime=180000

##Enabling second level cache in hibernate
#spring.jpa.properties.hibernate.cache.use_second_level_cache=true
##Telling spring which cache framework I am using
#spring.jpa.properties.hibernate.cache.region.factory_class=
#spring.jpa.properties.javax.persistence.sharedCache.mode=ENABLE_SELECTIVE

#For logging
#If logback.xml is not defined then only these properties will be picked up
logging.level.root=INFO
#we can put the level of logging here  ALL > DEBUG > INFO > WARN > ERROR > FATAL >OFF
logging.file.name=src/main/java/com/java/fullProject/someConceptTesting/logging/MyApp.log
#logging.level.org.springframework=OFF
logging.level.org.rakeshtech.project=ERROR
#We are setting logging level for group using using the below two lines
#logging.group.javadevjournal=com.javadevjournal.controller, com.javadevjournal.service, com.javadevjournal.util
#logging.level.javadevjournal=TRACE
logging.pattern.file=%p:%d{dd-MM-yy} %L %C{0}[%M]-%m%n
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %c--%p-%m%n
#Max file size, after this everything will  override
logging.logback.rollingpolicy.max-file-size=100MB
logging.logback.rollingpolicy.clean-history-on-start=true
logging.logback.rollingpolicy.max-history=3 
spring.output.ansi.enabled=ALWAYS
#debug=true

#for actuator endpoints
#By default the actuator endpoint is 8080, using this we can change the port
#management.server.port=8081
#To change the default base path from /actuator to /rakesh
management.endpoints.web.base-path=/rakesh
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
#This is used if we don't want to show the components in the health endpoint
#management.endpoint.health.show-components=never
#Information to show in info endpoints
management.endpoint.info.enabled=true
management.info.env.enabled=true
management.info.build.enabled=true
management.info.git.enabled=true
management.info.git.mode=full
management.info.java.enabled=true
management.info.os.enabled=true
#My custom information to display in info endpoint
info.application.name = Actuator's info endpoint
info.application.description= A demo Spring project with information
info.organization = Rakesh's organization
#Adding dynamic properties
info.java-version = ${java.version}
info.java-vendor = ${java.vendor}
management.health.status.order=DOWN, OUT_OF_SERVICE, UNKNOWN, ODD, EVEN, UP
management.endpoint.health.group.custom.status.order=DOWN, OUT_OF_SERVICE, UNKNOWN, ODD, EVEN, UP


#These things are written just to override the default username and password provided by spring when we include
#the security dependency
#spring.security.user.name=rakesh
#spring.security.user.password=rakesh123

#spring.profiles.active=classBcd, here we are activating the profile classBcd,
# any @Component class where we have @Profile("classBcd") will be activated and
# those changes will be taken into account

#This property is used to pick up the data/schema-h2.sql files
#spring.sql.init.mode=always, if false then data/schema-h2.sql files will never get picked up
#Location of our data/schema-h2.sql files if we are not using the default name
#spring.sql.init.data-locations=classpath:xyz.sql
#spring.sql.init.schema-locations=classpath:abc.sql
#This tells spring to first create the table using hibernate then call the data.sql/h2 file to fill the table
#spring.jpa.defer-datasource-initialization=true
