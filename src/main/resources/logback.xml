<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!-- appender shows where we want to log our o/p, here we have specified ConsoleAppender for
    console display-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--        Encoder is used to say how we will display our log, either in pattern format or Json format-->
        <encoder>
            <pattern class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                <!-- %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n-->
                %d - %c - %p - %msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- This is the root logger, it will overshadow any logger defined for other package level,
    we will put appender reference here to say that use the appender and show the logs in the format
    defined in the appender-->
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
    </root>
</configuration>

<!--         FILE BASED LOGGING
<configuration>
    <property name="FILE_DIR" value="src/main/java/com/java/fullProject/someConceptTesting/logging"/>
    <property name="FILE_NAME" value="MyApp"/>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        &lt;!&ndash;    location of the present log file&ndash;&gt;
        <file>${FILE_DIR}/${FILE_NAME}.log</file>
        <encoder>
            <pattern class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                %d - %c - %p - %msg%n
            </pattern>
        </encoder>
        &lt;!&ndash;    We have different kind of rolling policies&ndash;&gt;
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            &lt;!&ndash;            Location of the archived files&ndash;&gt;
            <fileNamePattern>${FILE_DIR}/archived/${FILE_NAME}.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            &lt;!&ndash;        Max size of each file&ndash;&gt;
            <maxFileSize>100MB</maxFileSize>
            &lt;!&ndash;        Total size of all archive files, if total size > 20GB, it will delete old archived file&ndash;&gt;
            <totalSizeCap>20GB</totalSizeCap>
            &lt;!&ndash;     Keep 60 days worth of history&ndash;&gt;
            <maxHistory>60</maxHistory>
        </rollingPolicy>

    </appender>
    <root level="INFO">
        <appender-ref ref="FILE"/>
    </root>
</configuration>-->


<!--LOOK INTO THIS EAZYBITES
        <?xml version="1.0" encoding="UTF-8"?>
<configuration>

<property name="LOGS" value="C://logs" />

<appender name="Console"
          class="ch.qos.logback.core.ConsoleAppender">
    <layout class="ch.qos.logback.classic.PatternLayout">
        <Pattern>
            %black(%d{ISO8601}) %highlight(%-5level) [%blue(%t)] %yellow(%C{1}): %msg%n%throwable
        </Pattern>
    </layout>
</appender>

<appender name="RollingFile"
          class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOGS}/spring-boot-logger.log</file>
    <encoder
            class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
        <Pattern>%d %p %C{1} [%t] %m%n</Pattern>
    </encoder>

    <rollingPolicy
            class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        &lt;!&ndash; rollover daily and when the file reaches 10 MegaBytes &ndash;&gt;
        <fileNamePattern>${LOGS}/archived/spring-boot-logger-%d{yyyy-MM-dd}.%i.log
        </fileNamePattern>
        <timeBasedFileNamingAndTriggeringPolicy
                class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
            <maxFileSize>10MB</maxFileSize>
        </timeBasedFileNamingAndTriggeringPolicy>
    </rollingPolicy>
</appender>

&lt;!&ndash; LOG everything at INFO level &ndash;&gt;
<root level="info">
    <appender-ref ref="RollingFile" />
    <appender-ref ref="Console" />
</root>

&lt;!&ndash; LOG "com.eazybytes.eazyschool*" at ERROR level &ndash;&gt;
<logger name="com.eazybytes.eazyschool" level="error" additivity="false">
    <appender-ref ref="RollingFile" />
    <appender-ref ref="Console" />
</logger>

</configuration>
-->
